#pragma warning(disable:4996)
#include <stdio.h>
#include <stdlib.h>

//1 DFS(깊이우선탐색) 순회 - 인접리스트
typedef struct vertex {
	int num, label;
	struct vertex *next;
}vertex;
typedef struct edge {
	int label;
	int startNode, endNode;
}edge;

int n, m, s; // 정점 개수 n, 간선 개수 m, 순회 시작 vertex 번호 s
vertex vertices[100];
edge edges[1000];

void intSwap(int *a, int *b);
int findEdgePlace(int ei, int inputEdgeStart, int inputEdgeEnd);
void makeEdges(int i, int startNode, int endNode);
void makeGraph();
vertex *oppositeNode(int nodeNum, int ei);
void DFS();
void rDFS(vertex *vIncidence, vertex *v);

int main() {
	scanf("%d %d %d", &n, &m, &s);

	for (int i = 0;i < m;i++) {
		edges->startNode = 0;
		edges->endNode = 0;
	}
	makeGraph();
	DFS();
}

void intSwap(int *a, int *b) {
	int tmp;
	tmp = *a;
	*a = *b;
	*b = tmp;
}
int findEdgePlace(int ei, int inputEdgeStart, int inputEdgeEnd) {
	edge tmp[1000];

	// 간선이 edges의 맨 앞에 추가되는 경우
	if (inputEdgeStart < edges[0].startNode)
		return 0;
	else if (inputEdgeStart == edges[0].startNode) {
		if (inputEdgeEnd < edges[0].endNode)
			return 0;
	}
	// 간선이 edges의 맨 뒤에 추가되는 경우
	if (edges[ei - 1].startNode < inputEdgeStart)
		return ei;
	else if (edges[ei - 1].startNode == inputEdgeStart) {
		if (edges[ei - 1].endNode < inputEdgeEnd)
			return ei;
	}
	// 간선이 edges의 사이에 추가되는 경우
	for (int i = 0;i < ei;i++) {
		if (edges[i].startNode < inputEdgeStart)
			continue;
		else if (inputEdgeStart == edges[i].startNode) { 
			if (edges[i].endNode < inputEdgeEnd)
				continue;
		}
		for (int j = i;j < ei;j++)
			tmp[j] = edges[j];
		for (int j = i;j < ei;j++)
			edges[j + 1] = tmp[j];
		return i;
	}
}
void makeEdges(int i, int startNode, int endNode) {
	edges[i].startNode = startNode;
	edges[i].endNode = endNode;
}
void makeIncidenceLists(vertex *v, int ei) {
	vertex *input;
	input = (vertex *)malloc(sizeof(vertex));
	input->num = ei;
	input->next = NULL;

	if (v->next == NULL) {
		v->next = input;
		printf(" %d", v->next->num);
	}
	else
		makeIncidenceLists(v->next, ei);
}
void makeGraph() {
	int inputIndex, inputEdgeStart, inputEdgeEnd;

	// 정점리스트 vertices 생성
	for (int i = 1;i <= n;i++) {
		vertices[i].num = i;
		vertices[i].next = NULL;
	}

	// 간선리스트 edges 생성
	for (int i = 0;i < m;i++) {
		scanf("%d %d", &inputEdgeStart, &inputEdgeEnd);
		if (inputEdgeStart > inputEdgeEnd)
			intSwap(&inputEdgeStart, &inputEdgeEnd);

		if (i == 0) inputIndex = i;
		else
			inputIndex = findEdgePlace(i, inputEdgeStart, inputEdgeEnd);
		makeEdges(inputIndex, inputEdgeStart, inputEdgeEnd);
	}
	printf("초기 edges\n");
	for (int i = 0;i < m;i++)
		printf(" %d%d(%d)", edges[i].startNode, edges[i].endNode, i);
	printf("\n");

	// 부착리스트 incidenceLists 생성
	for (int i = 1;i <= n;i++) {
		printf("vi : %d // ", i);
		for (int j = 0;j < m;j++) {
			if (vertices[i].num == edges[j].startNode || vertices[i].num == edges[j].endNode)
				makeIncidenceLists(vertices + i, j);
		}
		printf("\n");
	}
}
vertex *oppositeNode(int nodeNum, int ei) {
	int vNum;
	if (nodeNum == edges[ei].startNode)
		vNum = edges[ei].endNode;
	else if (nodeNum == edges[ei].endNode)
		vNum = edges[ei].startNode;
	for (int i = 1;i <= n;i++) {
		if (vertices[i].num == vNum)
			return (vertices + i);
	}
}
void DFS() {
	for (int i = 1;i <= n;i++)
		vertices[i].label = 0;
	for (int i = 0;i < m;i++)
		edges[i].label = 0;
	for (int i = s;i <= n;i++) {
		printf("<<< DFS >>>\n");
		if (vertices[i].label == 0) {
			printf("%d\n", vertices[i].num);
			rDFS(vertices + i, vertices[i].next);
		}
	}
}
void rDFS(vertex *v, vertex *vIncidence) {
	vertex *w;
	printf("<<< rDFS >>>\n");
	printf("v : %d, vIncidence : %d\n", v->num, vIncidence->num);
	v->label = 1;
	if (vIncidence == NULL) return;
	if (edges[vIncidence->num].label == 0) {
		w = oppositeNode(v->num, vIncidence->num);
		printf("w : %d(%d)\n", w->num, w->label);
		if (w->label == 0) {
			printf("Fresh\n");
			edges[vIncidence->num].label = 1;
			rDFS(w, w->next);
		}
		else {
			printf("Visited\n");
			rDFS(v, vIncidence->next);
		}
	}
	else {
		printf("Back\n");
		rDFS(v, vIncidence->next);
	}
}